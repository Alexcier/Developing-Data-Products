y=training$wage, plot="pairs")
featurePlot(x=training[,c("age", "education", "jobclass")],
y=training$wage, plot="pairs")
qplot(age,wage, data= training)
qplot(age,wage, colour=jobclass, data= training)
qplot(age, wage, colour=education, data=training)
modFit <- train(wage~age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod, 1, pch=19, cex = 0.5, col="00000010")
plot(finMod, 1, pch=19, cex = 0.5, col="00000010")
plot(finMod, 1, pch=19, cex = 0.5, col="00000010")
plot(finMod, 1, pch=19, cex = 0.5, col="0000010")
plot(finMod, 1, pch=19, cex = 0.5, col="#0000010")
plot(finMod, 1, pch=19, cex = 0.5, col="#00000010")
qplot(finMod$fitted, finMod$residuals, colour=race, data=training)
plot(finMod$residuals, pch=19)
plot(finMod$residuals, pch=19)
pred <- predict(modFit, testing)
qplot(wage, pred, colour= year, data = testing)
modFitall <- train(wage ~., data= training, method="lm")
modFitAll <- train(wage ~., data= training, method="lm")
pred<- predict(modFitAll, testing)
qplot(wage, pred, data=testing)
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training<- Wage[inTrain,]; testing <- Wage[-inTrain,]
library(ISLR)
library(ggplot2)
library(caret)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training<- Wage[inTrain,]; testing <- Wage[-inTrain,]
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training<- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour= Species, data = training)
library(caret)
modFit<- train(Species ~., method="rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
install.packages("RGtk2")
library(rattle)
install.packages("rattle")
install.packages("libgtk2.0-dev")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data("ozone", package= "ElemStatLearn")
ozone<- ozone[order(ozone, package="ElemStatLearn")]
ozone<- ozone[order(ozone$ozone)]
ozone<- ozone[order(ozone$ozone),]
head(ozone)
ll<- matrix(NA, nrow=10, ncol=155)
for(i in 1:10){
ss<-sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss,]; ozone0<- ozone0[order(ozone$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2)
ll[i,]<- predict(loess0, newdata = data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey", lwd=2)}
lines(1:155, apply(ll, 2, mean), col="red", lwd=2)
predictors = data.frame(ozone= ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B=10, bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
treebag <- bag(predictors, temperature, B=10, bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
predictors = data.frame(ozone= ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B=10, bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
install.packages("party")
library(party)
predictors = data.frame(ozone= ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B=10, bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone, temperature, col="lightblue", pch=19)
points(ozone$ozone, predict(treebag$fits[[1]]$fit, predictors), pch=19, col="red")
points(ozone$ozone, predict(treebag, predictors), pch=19, col="blue")
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training<- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library(ISLR)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training<- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library(caret)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
library(caret)
#create the random forest
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
modFit # have a look
# look at a specific tree
getTree(modFit$finalModel, k=2)
install.packages("getTree")
ls(package:randomForest)
install.packages("randomForest")
getTree(modFit$finalModel, k=2)
ls(package:randomForest)
ls(getNamespace("randomForest"), all.names=TRUE)
getTree(modFit$finalModel, k=2)
library(randomForest)
getTree(modFit$finalModel, k=2)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
modFit # have a look
install.packages("randomForest", dep = T)
install.packages("randomForest", dep = T)
library(caret)
library(randomForest)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
modFit # have a look
install.packages("randomForest", dep = T)
install.packages("randomForest", dep = T)
getTree(modFit$finalModel, k=2)
version
library(ggplot2)
library(ISLR)
library(ggplot2)
library(caret)
library(randomForest)
install.packages("caret", dep=T)
install.packages("caret", dep = T)
install.packages("caret", dep = T)
install.packages("caret", dep = T)
install.packages("caret", dep = T)
install.packages("caret", dep = T)
library(caret)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
install.packages("caret", dep=TRUE)
install.packages("caret", dep = TRUE)
install.packages("caret", dep = TRUE)
install.packages("caret", dep = TRUE)
install.packages("minqa")
install.packages("minqa")
install.packages("minqa")
install.packages("caret", dep=TRUE)
install.packages("caret", dep = TRUE)
install.packages("caret", dep = TRUE)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
install.packages(c('lme4', 'pbkrtest', 'BradleyTerry2', 'car', 'caret'))
install.packages(c("lme4", "pbkrtest", "BradleyTerry2", "car",
install.packages(c('lme4', 'pbkrtest', 'BradleyTerry2', 'car', 'caret'))
# look at a specific tree
install.packages("getTree")
install.packages(c('lme4', 'pbkrtest', 'BradleyTerry2', 'car', 'caret'))
library(caret)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
modFit<- train(Species~., data = training, method="rt", prox=TRUE)
modFit # have a look
getTree(modFit$finalModel, k=2)
install.packages("randomForest", dep = T)
getTree(modFit$finalModel, k=2)
library(randomForest)
getTree(modFit$finalModel, k=2)
modFit<- train(Species~., data = training, method="rf", prox=TRUE)
modFit # have a look
getTree(modFit$finalModel, k=2)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
irisP<- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width, y=Petal.Length, col=Species), size=5, shape=4, data=irisP)
table(pred, testing$Species)
pred <- predict(modFit, testing); testing$predRight <- pred==testing$Species # predicting new values
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length, colour=predRight, data=testing, main="newData Predictions")
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
Wage<- subset(Wage, select=-c(logwage))
Wage<- subset(Wage, select=-c(logwage)) # remove the predictor
inTrain<- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
Wage<- subset(Wage, select=-c(logwage)) # remove the predictor
Wage<- subset(Wage, select=-c(Wage$logwage)) # remove the predictor
Wage<- subset(Wage, select=-c(logwage)) # remove the predictor
head(Wage)
data(Wage)
Wage<- subset(Wage, select=-c(logwage)) # remove the predictor
inTrain<- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
print(modFit)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
print(modFit)
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
install.packages("gbm")
install.packages("gbm")
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
library(caret)
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
Wage<- subset(Wage, select=-c(logwage)) # remove the predictor
head(Wage)
inTrain<- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
modFit <- train(wage ~., method="gbm", data=training, verbose=FALSE)
print(modFit)
qplot(predict(modFit, testing), wage, data=testing)
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
inTrain<- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~., data=training, method="lda")
inTrain<- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~., data=training, method="lda")
names(iris)
table(iris$Species)
inTrain<- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~., data=training, method="lda")
inTrain<- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~., data=training, method="lda")
inTrain<- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~., data=training, method="lda")
dim(training); dim(testing)
table(iris$Species)
inTrain<- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~., data=training, method="lda")
plda = predict(modlda, testing); pnb = predict(modnb, testing)
modnb = train(Species ~., data=training, method="nb") # naive Bayes
plda = predict(modlda, testing); pnb = predict(modnb, testing)
table(plda, pnb)
equalPredictions = (plda==pnb)
qplot(Petal.Width, Sepal.Width, colour= equalPredictions, data=testing)
library(ElemStatLearn); data(prostate)
str(prostate)
small = prostate[1:5,]
lm(lpsa ~., data=small)
library(ISLR); data(Wage); library(ggplot2); library(caret)
Wage<- subset(Wage, select = -c(logwage))
inBuild <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
validation <- Wage[-inBuild,]; buildData<- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage, p=0.7, list = FALSE)
training <- buildData[inTrain,]; testing<- buildData[-inTrain,]
dim(training)
dim(testing)
dim(validation)
mod1<- train(wage~., method="glm", data=training)
mod1<- train(wage ~., method="glm", data=training)
mod2<- train(wage ~., method="rf", data=training, trControl = trainControl(method="cv"), number=3)
predDF <- data.frame(pred1, pred2, wage = testing$wage)
pred1<- predict(mod1, testing); pred2<- predict(mod2, testing)
qplot(pred1, pred2, colour=wage, data=testing)
predDF <- data.frame(pred1, pred2, wage = testing$wage)
combModFit <-train(wage ~., method="gam", daata=predDF)
combPred <- predict(combModFit, predDF)
combModFit <-train(wage ~., method="gam", daata=predDF)
combModFit <-train(wage ~., method="gam", data=predDF)
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
combModFit <-train(wage ~., method="gam", data=predDF)
library(ISLR); data(Wage); library(ggplot2); library(caret)
library(caret)
combModFit <-train(wage ~., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
sqrt(sum((pred1-testing$wage)^2))
sqrt(sum((pred2 - testing$wage)^2))
sqrt(sum((combPred - testing$wage)^2))
library(quantmod)
install.packages("quantmod")
library(quantmod)
from.dat<- as.Date("01/01/08", format="%m/%d/%y")
to.dat <-as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
mGoog<- to.monthly(GOOG)
googOpen <- Op(mGoog)
mGoog<- to.monthly(GOOG)
head(GOOG)
library(quantmod)
from.dat<- as.Date("01/01/08", format="%m/%d/%y")
to.dat <-as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
mGoog<- to.monthly(GOOG)
library(quantmod)
from.dat<- as.Date("01/01/08", format="%m/%d/%y")
to.dat <-as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
mGoog<- to.monthly(GOOG)
mGoog <- to.monthly(GOOG[,1:4])
googOpen <- Op(mGoog)
ts1 <- ts(googOpen, frequency=12)
plot(ts1, xlab="Years+1", ylab="GOOG")
plot(decompose(ts1), xlab="Years+1")
ts1Train<- windom(ts1, start=1, end=5)
ts1Train<- window(ts1, start=1, end=5)
ts1Train<- window(ts1, start=5, end=(7-0.01))
ts1Train
plot(ts1Train)
lines(ma(ts1Train,order=3), col="red")
lines(ma(ts1Train,order=3), col="red")
ets1<- ets(ts1Train, model="MMM")
fcast <- forecast(ets1)
library(quantmod)
plot(ts1Train)
lines(ma(ts1Train,order=3), col="red")
ets1<- ets(ts1Train, model="MMM")
fcast <- forecast(ets1)
plot(fcast);
plot(fcast);lines(ts1Test, col="red")
accuracy(fcast, ts1Test)
library(manipulate)
manipulate(plot(1:x), x= slider(1,100))
myHist<- function(mu){
hist(galton$chold, col="blue", breaks=100)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu =", mu))
text(63, 150, paste("MSE =", round(mse,2)))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
data("Galton")
library(HistData)
data("Galton")
myHist<- function(mu){
hist(galton$chold, col="blue", breaks=100)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu =", mu))
text(63, 150, paste("MSE =", round(mse,2)))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
myHist<- function(mu){
hist(Galton$chold, col="blue", breaks=100)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- mean((Galton$child - mu)^2)
text(63, 150, paste("mu =", mu))
text(63, 150, paste("MSE =", round(mse,2)))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
myHist<- function(mu){
hist(Galton$child, col="blue", breaks=100)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- mean((Galton$child - mu)^2)
text(63, 150, paste("mu =", mu))
text(63, 150, paste("MSE =", round(mse,2)))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
install.packages(rCharts)
require(rCharts)
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install_github('ramnathv/rCharts')
install_github('ramnathv/rCharts')
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
require(rCharts)
haireye= as.data.frame(HairEyeColor)
haireye= as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type='multiBarChart',
data= subset(haireye, Sex =='Male'))
n1$save('fig/n1.html', cdn=TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
haireye= as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type='multiBarChart',
data= subset(haireye, Sex =='Male'))
n1$save('fig/n1.html', cdn=TRUE)
getwd()
haireye= as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type='multiBarChart',
data= subset(haireye, Sex =='Male'))
n1$save('fig/n1.html', cdn=TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
nPlot(Freq ~ Hair, group = 'Eye', type='multiBarChart',
data= subset(haireye, Sex =='Male'))
names(iris)= gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data=iris, color= 'Species', type='point')
r1$save('fig/r1.html', cdn=TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
r1
r2<- rPlot(Freq ~ Hair| Eye, colour="Eye", data = hair_eye, type="bar")
r2<- rPlot(Freq ~ Hair| Eye, colour="Eye", data = haireye, type="bar")
r2
r2<- rPlot(Freq ~ Hair| Eye, colour='Eye', data = haireye, type="bar")
r2
r2<- rPlot(Freq ~ Hair| Eye, colour='Eye', data = haireye, type="bar")
r2
r2$save('fig/r2.html', cdn=TRUE)
cat('<iframe src="fig/r2.html" width=100%, height=600></iframe>')
r2<- rPlot(Freq ~ Hair| Eye, color='Eye', data = haireye, type="bar")
r2
r1<- rPlot(mpg~ wt| am+vs,data = mtcars, type="point", color="gear")
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data=iris, color= 'Species', type='point')
r1
r1$save('fig/r1.html', cdn=TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
r3$print("chart1")
r3<- rPlot(mpg~ wt| am+vs,data = mtcars, type="point", color="gear")
r3$print("chart1")
r3$save('myPlot.html')
r3$publish('myPlot', host='gist')
r3$publish('myPlot', host='rpubs')
install.packages("rjson")
r3$publish('myPlot', host='gist') # publish to github, rjson required
r3$publish('myPlot', host='rpubs') # publish on r pubs
data(economics, package = "ggplot2")
econ<-transform(economics, date=as.character(date))
m1<- mPlot(x="date", y=c("psavert", "uempmed"), type="Line", data=econ)
m1$set(pointSize = 0, lineWidth=1)
m1$save('fig/m1.html', cdn=TRUE)
data(economics, package = "ggplot2")
econ<-transform(economics, date=as.character(date))
m1<- mPlot(x="date", y=c("psavert", "uempmed"), type="Line", data=econ)
m1$set(pointSize = 0, lineWidth=1)
m1$save('fig/m1.html', cdn=TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
m1
require(reshape2)
uspexp<- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value~year, group="category", data=uspexp, type="line-dotted")
x1
x1$save('fig/x1.html', cdn=TRUE)
cat('<iframe src="fig/x1.html" width=100%, height=600></iframe>')
setwd("/home/alex/Documents/Coursera/Data Science/DevDataAss")
runApp()
library(shiny)
setwd("/home/alex/Documents/Coursera/Data Science/DevDataAss")
runApp()
library(datasets)
data("mtcars")
glModel <- function(predictors) {
if ( !is.null(predictors) ) {
f <- paste(names(mtcars)[1], '~', paste(predictors, collapse = ' + '))
glm(formula = f, data = mtcars)
} else {
NA
}
}
plotMod <- function(fit, n) {
if ( !is.na(fit) ) {
plot(fit, which = n)
}
}
statInfo <- function(fit) {
if( !is.na(fit) ) {
summary(fit)
}
}
plotMod(fit(), 1)
runApp()
getwd()
runApp()
